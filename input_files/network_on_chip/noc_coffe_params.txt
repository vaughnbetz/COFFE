# EXAMPLE COFFE INPUT FILE (BULK TRANSISTORS)
#
# Note: COFFE interprets any line beginning with a '#' as a comment in it's input files.
#
# COFFE input parameters can be divided into 2 groups:
# 1- Parameters describing the FPGA architecture
# 2- Process technology-related parameters
# 
# [1] C. Chiasson and V.Betz. "COFFE: Fully-Automated Transistor Sizing for FPGAs",
#      IEEE Int. Conf. on Field-Programmable Technology (FPT), 2013

#######################################
##### General parameters
#######################################

#Abs path to COFFE repo
#coffe_repo_path=~/COFFE

#The directory in which all outputs are generated, makes it easier to make sense of data
#coffe_design_out_folder=~/COFFE/output_files/network_on_chip

#The directory in which output files will be stored. 
#If not specified, the directory containing this file is used as output dir.
arch_out_folder=~/COFFE/output_files/network_on_chip/arch_out_dir

#######################################
##### Architecture Parameters
#######################################

# The following parameters are the classic VPR architecture parameters
N=10
K=6
W=320
L=4
I=40
Fs=3
Fcin=0.2
Fcout=0.025

# The following architecture parameters are new and help COFFE describe
# a more flexible BLE. See [1] for more details.

# Number of BLE outputs to general routing 
Or=2

# Number of BLE outputs to local routing
Ofb=1

# Population of local routing MUXes 
Fclocal=0.5

# Register select:
# Defines whether the FF can accept it's input directly from a BLE input or not.
# To turn register-select off, Rsel=z
# To turn register select on, Rsel=<ble_input_name>
# where <ble_input_name> = the name of the BLE input from which the FF can
# accept its input (e.g. a, b, c, etc...).
Rsel=c

# Register feedback muxes:
# Defines which LUT inputs support register feedback.
# Set Rfb to a string of LUT input names.
# For example: 
# Rfb=c tells COFFE to place a register feedback mux on LUT input C.
# Rfb=cd tells COFFE to place a register feedback mux on both LUT inputs C and D.
# Rfb=z tells COFFE that no LUT input should have register feedback muxes.
Rfb=c

# Do we want to use fracturable Luts?
use_fluts=False
# can be as large as K-1
#independent_inputs = 0

#enable_carry_chain = 1
#carry_chain_type = skip
#FAs_per_flut = 2


#######################################
##### Memory Block Parameters
#######################################

# Do we want Block RAM simulation at all?
enable_bram_module = 0

#Memory block voltage (low power transistors)
vdd_low_power = 0.95


# Memory technology type can be 'SRAM' or 'MTJ'.
memory_technology = SRAM

# The following determine the number of address bits used in each of the decoders
# These bits are used to determine the aspect ratio of the memory module
# Please note: if you use a two-bank BRAM, one of the bits below will be decoded by the bank selection address
# To make it controllable, I decided that this bit will always be taken from the row decoder.

# Row decoder
row_decoder_bits = 8
# Column decoder
col_decoder_bits = 2
# Width configurable decoder
conf_decoder_bits = 5
# Number of RAM banks
number_of_banks = 2


# voltage difference for the sense amp in volts
sense_dv = 0.03

# Weakest SRAM cell current in Amps
worst_read_current = 0.0000015

#MTJ resisitance values for 4 combinations of nominal/worst case for low/high states
MTJ_Rlow_nominal = 2500
MTJ_Rhigh_nominal = 6250
MTJ_Rlow_worstcase = 3060
MTJ_Rhigh_worstcase = 4840


# BRAM read to write ratio for power measurements:
read_to_write_ratio = 1.0

#######################################
##### Process Technology Parameters
#######################################

# Transistor type can be 'bulk' or 'finfet'. 
# Make sure your spice model file matches the transistor type you choose.
transistor_type=bulk

# The switch type can be 'pass_transistor' or 'transmission_gate'.
switch_type=pass_transistor
#switch_type=transmission_gate

# Supply voltage
vdd=0.8

# SRAM Vdd
vsram=1.0

# SRAM Vss
vsram_n=0.0

# Gate length (nm)
gate_length=22

# This parameter controls the gate length of PMOS level-restorers. For example, setting this paramater 
# to 4 sets the gate length to 4x the value of 'gate_legnth'. Increasing the gate length weakens the 
# PMOS level-restorer, which is sometimes necessary to ensure proper switching.
rest_length_factor = 1

# Minimum transistor diffusion width (nm).
min_tran_width=45

# Length of diffusion for a single-finger transistor (nm).
# COFFE uses this when it calculates source/drain parasitic capacitances.
trans_diffusion_length = 52

# Minimum-width transistor area (nm^2)
min_width_tran_area = 33864

# SRAM area (in number of minimum width transistor areas)
sram_cell_area = 4

# Path to SPICE device models file and library to use
model_path=spice_models/ptm_22nm_bulk_hp.l
model_library=22NM_BULK_HP

#######################################
##### Metal data
##### R in ohms/nm
##### C in fF/nm
##### format: metal=R,C
##### ex: metal=0.054825,0.000175
#######################################

# Each 'metal' statement defines a new metal layer. 
# COFFE uses two metal layers by default. The first metal layer is where COFFE 
# implements all wires except for the general routing wires. They are implemented
# in the second metal layer. 


# All wires except the general routing wires are implemented in this layer.
metal=0.054825,0.000175

# General routing wires will be implemented in this layer 
metal=0.007862,0.000215

# Memory array wires will be implemented in this layer
metal=0.029240,0.000139

# This layer is used in MTJ wordline (if BRAM technology is MTJ)
metal=0.227273,0.000000

# If you wanted to, you could define more metal layers by adding more 'metal'
# statements but, by default, COFFE would not use them because it only uses 2 layers.
# The functionality of being able to add any number of metal layers is here to allow
# you to investigate the use of more than 2 metal layers if you wanted to. However,
# making use of more metal layers would require changes to the COFFE source code.


# if hybrid blocks are enabled, list configurations here
hb_files = input_files/network_on_chip/noc_hb_settings.txt
#hb_files = input_files/network_on_chip/vcr_top_hb_settings.txt
#hb_files = input_files/network_on_chip/noc_hb_settings_7nm.txt
