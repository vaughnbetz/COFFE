# EXAMPLE COFFE INPUT FILE (FINFET TRANSISTORS)
#
# Note: COFFE interprets any line beginning with a '#' as a comment in it's input files.
#
# COFFE input parameters can be divided into 2 groups:
# 1- Parameters describing the FPGA architecture
# 2- Process technology-related parameters
# 
# [1] C. Chiasson and V.Betz. "COFFE: Fully-Automated Transistor Sizing for FPGAs",
#      IEEE Int. Conf. on Field-Programmable Technology (FPT), 2013


#######################################
##### Architecture Parameters
#######################################
fpga_arch_params:
  # The following parameters are the classic VPR architecture parameters
  N : 10
  K : 6
  W : 320
  L : 4
  I : 40
  Fs : 3
  Fcin : 0.2
  Fcout : 0.025

  arch_out_folder : ~/COFFE/output_files/finfet_7nm/pass_0.9_area_13122
  #~/COFFE/output_files/finfet_7nm_0.9_boost/arch_out_dir
  #~/COFFE/output_files/finfet_7nm_trans/arch_out_dir 
  # ~/COFFE/output_files/finfet_7nm_0.9_boost/arch_out_dir

  # The following architecture parameters are new and help COFFE describe
  # a more flexible BLE. See [1] for more details.

  # Number of BLE outputs to general routing 
  Or : 2

  # Number of BLE outputs to local routing
  Ofb : 2

  # Population of local routing MUXes 
  Fclocal : 0.5

  # Register select:
  # Defines whether the FF can accept it's input directly from a BLE input or not.
  # To turn register-select off, Rsel : z
  # To turn register select on, Rsel : <ble_input_name>
  # where <ble_input_name>  :  the name of the BLE input from which the FF can
  # accept its input (e.g. a, b, c, etc...).
  Rsel : c

  # Register feedback muxes:
  # Defines which LUT inputs support register feedback.
  # Set Rfb to a string of LUT input names.
  # For example: 
  # Rfb : c tells COFFE to place a register feedback mux on LUT input C.
  # Rfb : cd tells COFFE to place a register feedback mux on both LUT inputs C and D.
  # Rfb : z tells COFFE that no LUT input should have register feedback muxes.
  Rfb : c

  #######################################
  ##### Process Technology Parameters
  #######################################

  # Transistor type can be 'bulk' or 'finfet'. 
  # Make sure your spice model file matches the transistor type you choose.
  transistor_type : finfet

  # The switch type can be 'pass_transistor' or 'transmission_gate'.
  switch_type : pass_transistor

  # Supply voltage
  vdd : 0.7

  # This voltage is actually the boost voltage for the pass transistors
  # Will typically have to be around 0.2 V higher than vdd to compensate for lost voltage
  vsram : 0.9

  # SRAM Vss
  vsram_n : 0.0

  # Gate length (nm)
  # ASAP7 in virtuoso only allowed 20nm length
  gate_length : 20

  # This parameter controls the gate length of PMOS level-restorers. For example, setting this paramater 
  # to 4 sets the gate length to 4x the value of 'gate_legnth'. Increasing the gate length weakens the 
  # PMOS level-restorer, which is sometimes necessary to ensure proper switching.
  rest_length_factor  :  5

  # For FinFETs, minimum transistor refers to the contact width of a single-fin transistor (nm). 
  # COFFE uses this when it calculates source/drain parasitic capacitances.
  # ASAP7 has 27nm minimum 
  min_tran_width  :  7

  # Length of diffusion for a single-finger transistor (nm).
  # COFFE uses this when it calculates source/drain parasitic capacitances.
  trans_diffusion_length  :  25

  # Minimum-width transistor area (nm^2)
  # Look in design rules, make me 1 fin, shortest gate, contact on both sides, no diffusion sharing, 1 space between next transistor
  # Layout a single transistor pass DRC, look for sample layout
  min_width_tran_area  :  13122

  # SRAM area (in number of minimum width transistor areas)
  sram_cell_area  :  4

  # Path to SPICE device models file and library to use
  model_path : spice_models/7nm_TT_160803.l
  model_library : 7NM_FINFET_HP

  #######################################
  ##### Metal data
  ##### R in ohms/nm
  ##### C in fF/nm
  ##### format: metal : R,C
  ##### ex: metal : 0.054825,0.000175
  #######################################

  # Each 'metal' statement defines a new metal layer. 
  # COFFE uses two metal layers by default. The first metal layer is where COFFE 
  # implements all wires except for the general routing wires. They are implemented
  # in the second metal layer. 

  # Mx and My for F7 node in https://dl.acm.org/doi/pdf/10.1145/3431920.3439300

  metal : 
  # All wires except the general routing wires are implemented in this layer.
  # Mx
  # - [0.1287,0.00022]
  # ASAP 7 M1-M3
  - [0.1312, 0.00022]
  
  # General routing wires will be implemented in this layer 
  # My
  # - [0.0216,0.00024]
  # ASAP 7 Avg of M4-M5 & M6-M7 (Intermediate layers)
  - [0.0428, 0.00022]

  # No idea where to find this information for 7nm SRAM but maybe we can try
  # Memory array wires will be implemented in this layer
  - [0.029240,0.000139]
  # This layer is used in MTJ wordline (if BRAM technology is MTJ)
  - [0.227273,0.000000]


  # If you wanted to, you could define more metal layers by adding more 'metal'
  # statements but, by default, COFFE would not use them because it only uses 2 layers.
  # The functionality of being able to add any number of metal layers is here to allow
  # you to investigate the use of more than 2 metal layers if you wanted to. However,
  # making use of more metal layers would require changes to the COFFE source code.

